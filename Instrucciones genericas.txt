Downloading  and Installing Git
    To install Git on your computer, go to https://git-scm.com/downloads to download the Git installer for your specific computing platform. 
    Then, follow the installation steps as you install Git using the installer.
    You can find more details about installing Git at https://git-scm.com/book/en/v2/Getting-Started-Installing-Git. This document lists several ways of installing Git on various platforms.
    Installing some of the GUI tools like GitHub Desktop will also install Git on your computer.
    On a Mac, setting up XCode command-line tools also will set up Git on your computer.
    You can choose any of the methods that is most convenient for you.
Some Global Configuration for Git

    Open a cmd window or terminal on your computer.
    Check to make sure that Git is installed and available on the command line, by typing the following at the command prompt:
git --version
    To configure your user name to be used by Git, type the following at the prompt:
git config --global user.name "Your Name"
    To configure your email to be used by Git, type the following at the prompt:
git config --global user.email <your email address>
    You can check your default Git global configuration, you can type the following at the prompt:
git config --list
Conclusions
At the end of this exercise you should have Git available on the command-line of your computer.


Initializing the folder as a Git repository
    Go to the git-test folder in your cmd window/terminal and type the following at the prompt to initialize the folder as a Git repository:
git init
Checking your Git repository status
    Type the following at the prompt to check your Git repository's status:
git status
Adding files to the staging area
    To add files to the staging area of your Git repository, type:
git add .
Commiting to the Git repository
    To commit the current staging area to your Git repository, type:
git commit -m "first commit"
Checking the log of Git commits
    To check the log of the commits to your Git repository, type
git log --oneline
    Now, modify the index.html file as follows:

Checking out a file from an earlier commit
    To check out the index.html from the second commit, find the number of the second commit using the git log, and then type the following at the prompt:
git checkout <second commit's number> index.html
Resetting the Git repository
    To discard the effect of the previous operation and restore index.html to its state at the end of the third commit, type:
git reset HEAD index.html
    Then type the following at the prompt:
git checkout -- index.html
    You can also use git reset to reset the staging area to the last commit without disturbing the working directory.
Conclusions
At the end of this exercise you should have learnt some basic Git commands. Experiment with these commands until you fully understand how to use Git.



Set the local Git repository to set its remote origin
    At the prompt, type the following to set up your local repository to link to your online Git repository:
git remote add origin <repository URL>
Pushing your commits to the online repository
    At the prompt, type the following to push the commits to the online repository:
git push -u origin master
Cloning an online repository
    To clone an online repository to your computer, type the following at the prompt:
git clone <repository URL>
Conclusions
In this exercise you have learnt to set up an online Git repository, synchronize your local repository with the remote repository, and clone an online repository.




Exercise (Instructions): Setting up Node.js and NPM
Note: Make sure you have installed Git on your machine before you install Node.js. Please complete the previous Git installation exercise before proceeding with this exercise.
Objectives and Outcomes
In this exercise, you will learn to set up the Node.js environment, a popular Javascript based server framework, and node package manager (NPM) on your machine. To learn more about NodeJS, you can visit https://nodejs.org. For this course, you just need to install Node.js on your machine and make use of it for running some front-end tools. You will learn more about the server-side support using Node.js in a subsequent course. At the end of this exercise, you will be able to:
    Complete the set up of Node.js and NPM on your machine
    Verify that the installation was successful and your machine is ready for using Node.js and NPM.
Installing Node
    To install Node on your machine, go to https://nodejs.org and click on the Download button. Depending on your computer's platform (Windows, MacOS or Linux), the appropriate installation package is downloaded.
    As an example, on a Mac, you will see the following web page. Click on the Download button. Follow along the instructions to install Node on your machine. (Note: Now Node gives you the option of installing a mature and dependable LTS version and a more newer stable version. You should to install the LTS version. I will use this version in the course.)
Note: On Windows machines, you may need to configure your PATH environmental variable in case you forgot to turn on the add to PATH during the installation steps.
Verifying the Node Installation
    Open a terminal window on your machine. If you are using a Windows machine, open a cmd window or PowerShell window with admin privileges.
    To ensure that your NodeJS setup is working correctly, type the following at the command prompt to check for the version of Node and NPM
node -v
npm -v
Conclusions
At the end of this exercise, your machine is now ready with the Node installed for further development. We will examine web development tools next.



Exercise Resources
Bootstrap4-starter.zip
Objectives and Outcomes
This exercise introduces the first set of steps to set up your web page to make use of Bootstrap classes and components. At the end of this exercise, you will be able to:
    Download Bootstrap using NPM and include it in your project
    Understand how to set up a web project to use Bootstrap
    Include the Bootstrap CSS and JS classes into a web page
Note: Please remember to retain the folder and all the files that you create in this exercise. Further exercises will build upon the files that you create in this exercise. DO NOT DELETE the files at the end of the exercise.
Setting up the Project Folder
    Go to a convenient folder location on your computer and download the Bootstrap4-starter.zip file using the link provided at the top of this page.
    Unzip the file to see a folder named Bootstrap4 and a sub-folder under it named conFusion created. Move to the conFusion folder.
    Open a cmd window/terminal and move to the conFusion folder.
    At the prompt type
npm install
    This will install the lite-server node module to your project.
    Next, initialize a Git repository in the project folder, and then set up a .gitignore file with the contents as shown below:

    Now do a commit of your project folder to the Git repository with the message "Initial Setup". You will be doing a commit of your project at the end of each exercise so that you retain the completed files of each exercise.
    Set up an online Git repository and synchronize your project folder with the online repository.
node_modules
Downloading Bootstrap
    You will use npm to fetch the Bootstrap files for use within your project. Thereafter you need to install JQuery and Popper.js as shown below since Bootstrap 4 depends on these two. At the prompt, type the following to fetch Bootstrap files to your project folder:
npm install bootstrap@4.0.0 --save
npm install jquery@3.3.1 popper.js@1.12.9 --save
	This will fetch the Bootstrap files and store is in your node_modules folder in a bootstrap folder. The bootstrap->dist folder contains the precompiled Bootstrap CSS and JS files for use within your project.
    Open your project folder in your editor, and then open the index.html file in the conFusion folder. This is your starting web page for the project. We have already created the web page with some content to get you started. We will use Bootstrap to style this web page, and learn Bootstrap features, classes and components along the way.
    Start your lite-server by typing npm start at the prompt. The index.html file should now be loaded into your default browser.
Getting your Web page Bootstrap ready
    Open the index.html file in your favourite text editor. If you are using Visual Studio Code, Brackets, Sublime Text or similar editors, you can open the project folder in the editor and then view index.html.
    Insert the following code in the <head> of index.html file before the title.
<!-- Required meta tags always come first -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<!-- Bootstrap CSS -->
<link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
	This will include Bootstrap CSS into your web page. Note the subtle change in the fonts of the content of the web page. This is the Bootstrap typography effect coming into play. The default Bootstrap typography sets the font to Helvetica Neue and selects the appropriate font size based on the choice of the heading style and paragraph style for the content.
    At the bottom of the page, just before the end of the body tag, add the following code to include the JQuery library, popper.js library and Bootstrap's Javascript plugins. Bootstrap by default uses the JQuery Javascript library for its Javascript plugins. Hence the need to include JQuery library in the web page.
<!-- jQuery first, then Popper.js, then Bootstrap JS. -->
<script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
<script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
<script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    Now, do a Git commit with the message "Intro. to Bootstrap". You may push the commit to your online repository.
Conclusion
We have now understood how to set up a web project to use Bootstrap. In the next lecture, we will explore further on responsive design and Bootstrap's grid system.



Exercise (Instructions): Scss
Objectives and Outcomes
In this exercise you will learn to write Scss code and then automatically transform it into the corresponding CSS code. At the end of this exercise you will be able to:
    Write Scss code using many of the features of Scss
    Automatically convert the Scss code into CSS
Adding Scss Variables
    Open the conFusion project in a text editor of your choice. In the css folder, create a file named styles.scss. We will add the Scss code into this file.
    Add the following Scss variables into the file:
$lt-gray: #ddd;
$background-dark: #512DA8;
$background-light: #9575CD;
$background-pale: #D1C4E9;
// Height variables
$carousel-item-height: 300px;
	We have just added a few color and a height variable. We will make use of these variables while defining the classes.
Scss Mixins
    Next we add a mixin into the file as follows:
@mixin zero-margin($pad-up-dn, $pad-left-right) {
margin:0px auto;
padding: $pad-up-dn $pad-left-right;
}
We will make use of this to define several row classes next.
    Using the variables and Mixin class that we defined earlier, add the following row classes to the file:
.row-header{@include zero-margin(0px,0px);}
.row-content {@include zero-margin(50px,0px);border-bottom: 1px ridge;min-height:400px;}
.footer{background-color: $background-pale;@include zero-margin(20px, 0px);}
.jumbotron {@include zero-margin(70px,30px);background: $background-light ;color:floralwhite;}
address{font-size:80%;margin:0px;color:#0f0f0f;}
body{padding:50px 0px 0px 0px;z-index:0;}
.navbar-dark {background-color: $background-dark;}
.tab-content {border-left: 1px solid $lt-gray;border-right: 1px solid $lt-gray;border-bottom: 1px solid $lt-gray;padding: 10px;}
Note the use of the variables and the mixin with various parameters in defining the classes.
Nesting Selectors

    Next we add a carousel class to illustrate the use of nesting of classes in Scss, as follows:
.carousel {background:$background-dark;.carousel-item {height: $carousel-item-height;img {position: absolute;top: 0;left: 0;min-height: 300px;}}}
#carouselButton {right:0px;position: absolute;bottom: 0px;z-index: 1;}

Installing and using the node-sass module

    Now we install the node module to support the compilation of the Scss file to a CSS file. To do this, type the following at the command prompt:
npm install --save-dev node-sass@4.7.2
This will install the node-sass NPM module into your project and also add it as a development dependency in your package.json file.

    Next open your package.json file and add the following line into the scripts object there.  This adds a script to enable the compilation of the Scss file into a CSS file:
"scss": "node-sass -o css/ css/"
    In order to transform the Scss file to a CSS file, type the following at the prompt:
"scss": "node-sass -o css/ css/"
    You can now do a Git commit with the message "Sass".
Conclusions
In this exercise you learnt to write Scss code and then automatically generating the CSS file by compiling the Scss code.



Exercise (Instructions): NPM Scripts Part 1
Objectives and Outcomes
In this exercise, you will learn to set up NPM scripts by modifying the package.json file. At the end of this exercise, you will be able to:
    Watch for changes to the styles.scss file and automatically compile it to the css file.
    Run multiple NPM scripts in parallel using parallelshell NPM module.
Moving JS to Script file
    Create a folder named js and in that folder create a file named scripts.js.
    Open index.html and from this file cut out all the JQuery script that we added to it and move the code to the scripts.js file that we created above.
    Then, update the index.html file to include the scripts.js file by adding the following line:
<script src="js/scripts.js"></script>
    Add the same line to the scripts block in aboutus.html and contactus.html:
Watching for Changes and Parallelshell
    First, we install two NPM packages onchange and parallelshell as follows:
npm install --save-dev onchange@3.3.0 parallelshell@3.0.2
    Then, add the following two script items to package.json if you are doing the exercise on a MacOS computer or a Linux computer:

    NOTE: If you are doing the exercise on a Windows computer, please use the following two script items instead of the above:
"watch:scss": "onchange \"css/*.scss\" -- npm run scss",
"watch:all": "parallelshell \"npm run watch:scss\" \"npm run lite\""
    You will also update the start script as follows:
"start": "npm run watch:all",
    Then, type the following at the prompt to start watching for changes to the SCSS file, compile it to CSS, and run the server:
npm start
    Now, whenever you make any changes to styles.scss file, it will automatically be compiled to the corresponding css file.
    Do a Git Commit with the message "NPM Scripts Part 1".
Conclusions
In this exercise, you learnt how to set up a watch task to watch for changes to a file and automatically run tasks upon detecting changes.


Exercise (Instructions): NPM Scripts Part 2
Objectives and Outcomes
In this exercise you will learn to build a distribution folder containing the files that can be deployed on a web server hosting your project. This distribution folder would be built from your project files using various NPM packages and scripts. At the end of this exercise, you will be able to:
    Clean out a folder using the clean NPM module.
    Copy files from one folder to another
    Prepare a minified and concatenated css file from all the css files used in your project
    Prepare an uglified and concatenated JS file containing all the JS code used in your project
Cleaning up a Distribution Folder
    Install the rimraf npm module by typing the following at the prompt:
npm install --save-dev rimraf@2.6.2
    Then, set up the following script:
"clean": "rimraf dist",
Copying Fonts
    Your project uses font-awesome fonts. These need to be copied to the distribution folder. To help us do this, install the copyfiles NPM module globally as follows:
npm -g install copyfiles@2.0.0
    Then set up the following script:
"copyfonts": "copyfiles -f node_modules/font-awesome/fonts/* dist/fonts",
Compressing and Minifying Images
    We use the imagemin-cli NPM module to help us to compress our images to reduce the size of the images being used in our project. Install the imagemin-cli module as follows:
    Then set up the following script:
"imagemin": "imagemin img/* --out-dir='dist/img'",
Preparing the Distribution Folder
    Open .gitignore and update it as follows. We do not want the dist folder to be checked into the git repository.
node_modules
dist
    Then, install the usemin-cli, cssmin, uglifyjs and htmlmin NPM packages as follows:
npm install --save-dev usemin-cli@0.5.1 cssmin@0.4.3 uglifyjs@2.4.11 htmlmin@0.0.7
	Add the following two scripts to the package.json file:
"usemin": "usemin contactus.html -d dist --htmlmin -o dist/contactus.html && usemin aboutus.html -d dist --htmlmin -o dist/aboutus.html && usemin index.html -d dist --htmlmin -o dist/index.html",
"build": "npm run clean && npm run imagemin && npm run copyfonts && npm run usemin"
    Open index.html and surround the css links inclusion code as follows:
<!-- build:css css/main.css -->
<link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="node_modules/font-awesome/css/font-awesome.min.css">
<link rel="stylesheet" href="node_modules/bootstrap-social/bootstrap-social.css">
<link href="css/styles.css" rel="stylesheet">
<!-- endbuild -->
    Do the same change in aboutus.html and contactus.html
    Similarly, open index.html and surround the js script inclusion code as follows:
<!-- build:js js/main.js -->
<script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
<script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
<script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="js/scripts.js"></script>
<!-- endbuild -->
    Do the same change in aboutus.html and contactus.html
    To build the distribution folder, you can type the following at the prompt:
npm run build
    This will build the dist folder containing the files that are a self-contained version of your project. You can now copy the contents of this folder to a web server that hosts your website.
    After verifying that the dist folder is built correctly, you can now do a git commit with the message "NPM Scripts Part 2"
Conclusions
In this exercise, you learnt the various steps to build the project for deployment using NPM scripts.



















